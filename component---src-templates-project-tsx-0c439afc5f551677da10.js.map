{"version":3,"sources":["webpack:///./src/templates/project.tsx"],"names":["PBox","styled","AnimatedBox","Content","Box","props","transparentize","bg","theme","space","breakpoints","Category","fontSizes","Description","animated","div","YouTubeContainer","YoutubeStyle","position","top","left","width","height","Button","color","readableColor","Project","data","project","images","categoryAnimation","youtube","useSpring","config","slow","from","opacity","transform","to","titleAnimation","delay","descAnimation","imagesAnimation","pathname","slug","title","title_detail","desc","node","parent","banner","cover","childImageSharp","resize","src","individual","py","px","style","category","h1","dangerouslySetInnerHTML","__html","nodes","map","image","alt","name","key","fluid","videoId","className","frameBorder","allowFullScreen","query"],"mappings":"wQAWMA,EAAOC,YAAOC,KAAV,gEAAGD,CAAH,qCAKJE,EAAUF,YAAOG,KAAV,mEAAGH,CAAH,6IACS,SAAAI,GAAK,OAAIC,YAAe,GAAKD,EAAME,KAIpC,SAAAF,GAAK,OAAIA,EAAMG,MAAMC,MAAM,KAEvB,SAAAJ,GAAK,OAAIA,EAAMG,MAAME,YAAY,IACnC,SAAAL,GAAK,OAAIA,EAAMG,MAAMC,MAAM,KAK5CE,EAAWV,YAAOC,KAAV,oEAAGD,CAAH,kEAEC,SAAAI,GAAK,OAAIA,EAAMG,MAAMI,UAAU,KAIxCC,EAAcZ,YAAOa,IAASC,KAAnB,uEAAGd,CAAH,sHAQXe,EAAmBf,IAAOc,IAAV,4EAAGd,CAAH,sFAOhBgB,EAAe,CACnBC,SAAU,WACVC,IAAK,EACLC,KAAM,EACNC,MAAO,OACPC,OAAQ,QAGMrB,YAAOsB,KAAV,mEAAGtB,CAAH,8BACG,SAAAI,GAAK,MAAqB,UAAhBA,EAAMmB,MAAoB,QAAUnB,EAAMmB,OACzD,SAAAnB,GAAK,OAAIoB,YAA8B,UAAhBpB,EAAMmB,MAAoB,QAAUnB,EAAMmB,SAkH7DE,UAtEqC,SAAC,GAA2C,QAAzCC,KAAQC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,OAChEC,GADwF,EAAhBC,QACpDC,YAAU,CAClCC,OAAQA,IAAOC,KACfC,KAAM,CAAEC,QAAS,EAAGC,UAAW,4BAC/BC,GAAI,CAAEF,QAAS,EAAGC,UAAW,2BAGzBE,EAAiBP,YAAU,CAC/BC,OAAQA,IAAOC,KACfM,MAAO,IACPL,KAAM,CAAEC,QAAS,GACjBE,GAAI,CAAEF,QAAS,KAEXK,EAAgBT,YAAU,CAC9BC,OAAQA,IAAOC,KACfM,MAAO,IACPL,KAAM,CAAEC,QAAS,GACjBE,GAAI,CAAEF,QAAS,KAEXM,EAAkBV,YAAU,CAChCC,OAAQA,IAAOC,KACfM,MAAO,IACPL,KAAM,CAAEC,QAAS,GACjBE,GAAI,CAAEF,QAAS,KAGjB,OACE,kBAAC,IAAD,CAAQZ,MAAOI,EAAQJ,OACrB,kBAAC,IAAD,CACEmB,SAAUf,EAAQgB,KAClBC,MAAUjB,EAAQkB,aAAb,uBACLC,KAAMnB,EAAQmB,KACdC,KAAMpB,EAAQqB,OACdC,OAAQtB,EAAQuB,MAAMC,gBAAgBC,OAAOC,IAC7CC,YAAU,IAEZ,kBAACvD,EAAD,CAAMwD,GAAI,GAAIC,GAAI,CAAC,EAAG,EAAG,EAAG,KAC1B,kBAAC9C,EAAD,CAAU+C,MAAO5B,GAAoBF,EAAQ+B,UAC7C,kBAAC,IAASC,GAAV,CAAaF,MAAOnB,GAAiBX,EAAQkB,cAC7C,kBAACjC,EAAD,CAAa6C,MAAOjB,GAClB,yBAAKoB,wBAAyB,CAAEC,OAAQlC,EAAQmB,UAGpD,kBAAC5C,EAAD,CAASI,GAAIqB,EAAQJ,MAAOgC,GAAI,IAC9B,kBAACxD,EAAD,CAAM0D,MAAOhB,EAAiBe,GAAI,CAAC,EAAG,EAAG,EAAG,KACzC5B,EAAOkC,MAAMC,IAAI,SAAAC,GAAK,OACrB,kBAAC,IAAD,CAAKC,IAAKD,EAAME,KAAMC,IAAKH,EAAMb,gBAAgBiB,MAAMf,IAAKe,MAAOJ,EAAMb,gBAAgBiB,UAE1FzC,EAAQG,QAAQiC,IAAI,SAAAM,GAAO,OAC1B,kBAACtD,EAAD,CAAkBuD,UAAU,iBAC1B,4BACEb,MAAOzC,EACPqC,IAAG,iCAAmCgB,EACtCE,YAAY,IACZC,gBAAgB,2BAkBzB,IAAMC,EAAQ","file":"component---src-templates-project-tsx-0c439afc5f551677da10.js","sourcesContent":["import React from 'react'\r\nimport { graphql } from 'gatsby'\r\nimport Img from 'gatsby-image'\r\n// import YouTube from 'react-youtube';\r\nimport { transparentize, readableColor } from 'polished'\r\nimport styled from 'styled-components'\r\nimport { config, useSpring, animated } from 'react-spring'\r\nimport Layout from '../components/layout'\r\nimport { Box, AnimatedBox, Button } from '../elements'\r\nimport SEO from '../components/SEO'\r\n\r\nconst PBox = styled(AnimatedBox)`\r\n  max-width: 1400px;\r\n  margin: 0 auto;\r\n`\r\n\r\nconst Content = styled(Box)<{ bg: string }>`\r\n  background-color: ${props => transparentize(0.9, props.bg)};\r\n\r\n  .gatsby-image-wrapper:not(:last-child),\r\n  .youtube-video {\r\n    margin-bottom: ${props => props.theme.space[10]};\r\n\r\n    @media (max-width: ${props => props.theme.breakpoints[3]}) {\r\n      margin-bottom: ${props => props.theme.space[8]};\r\n    }\r\n  }\r\n`\r\n\r\nconst Category = styled(AnimatedBox)`\r\n  letter-spacing: 0.05em;\r\n  font-size: ${props => props.theme.fontSizes[1]};\r\n  text-transform: uppercase;\r\n`\r\n\r\nconst Description = styled(animated.div)`\r\n  max-width: 960px;\r\n  letter-spacing: -0.003em;\r\n  --baseline-multiplier: 0.179;\r\n  --x-height-multiplier: 0.35;\r\n  line-height: 1.58;\r\n`\r\n\r\nconst YouTubeContainer = styled.div`\r\n  position: relative;\r\n  padding-bottom: 56.25%;\r\n  height: 0;\r\n  overflow: hidden;\r\n  max-width: 100%;\r\n`\r\nconst YoutubeStyle = {\r\n  position: 'absolute',\r\n  top: 0,\r\n  left: 0,\r\n  width: '100%',\r\n  height: '100%',\r\n}\r\n\r\nconst PButton = styled(Button)<{ color: string }>`\r\n  background: ${props => (props.color === 'white' ? 'black' : props.color)};\r\n  color: ${props => readableColor(props.color === 'white' ? 'black' : props.color)};\r\n`\r\n\r\ntype PageProps = {\r\n  data: {\r\n    project: {\r\n      title_detail: string\r\n      color: string\r\n      category: string\r\n      desc: string\r\n      slug: string\r\n      youtube: string[]\r\n      parent: {\r\n        modifiedTime: string\r\n        birthTime: string\r\n      }\r\n      cover: {\r\n        childImageSharp: {\r\n          resize: {\r\n            src: string\r\n          }\r\n        }\r\n      }\r\n    }\r\n    images: {\r\n      nodes: {\r\n        name: string\r\n        childImageSharp: {\r\n          fluid: {\r\n            aspectRatio: number\r\n            src: string\r\n            srcSet: string\r\n            sizes: string\r\n            base64: string\r\n            tracedSVG: string\r\n            srcWebp: string\r\n            srcSetWebp: string\r\n          }\r\n        }\r\n      }[]\r\n    }\r\n  }\r\n}\r\n\r\nconst Project: React.FunctionComponent<PageProps> = ({ data: { project, images, youtube } }) => {\r\n  const categoryAnimation = useSpring({\r\n    config: config.slow,\r\n    from: { opacity: 0, transform: 'translate3d(0, -30px, 0)' },\r\n    to: { opacity: 1, transform: 'translate3d(0, 0, 0)' },\r\n  })\r\n\r\n  const titleAnimation = useSpring({\r\n    config: config.slow,\r\n    delay: 300,\r\n    from: { opacity: 0 },\r\n    to: { opacity: 1 },\r\n  })\r\n  const descAnimation = useSpring({\r\n    config: config.slow,\r\n    delay: 600,\r\n    from: { opacity: 0 },\r\n    to: { opacity: 1 },\r\n  })\r\n  const imagesAnimation = useSpring({\r\n    config: config.slow,\r\n    delay: 800,\r\n    from: { opacity: 0 },\r\n    to: { opacity: 1 },\r\n  })\r\n\r\n  return (\r\n    <Layout color={project.color}>\r\n      <SEO\r\n        pathname={project.slug}\r\n        title={`${project.title_detail} | Sebastiaan Jansen`}\r\n        desc={project.desc}\r\n        node={project.parent}\r\n        banner={project.cover.childImageSharp.resize.src}\r\n        individual\r\n      />\r\n      <PBox py={10} px={[6, 6, 8, 10]}>\r\n        <Category style={categoryAnimation}>{project.category}</Category>\r\n        <animated.h1 style={titleAnimation}>{project.title_detail}</animated.h1>\r\n        <Description style={descAnimation}>\r\n          <div dangerouslySetInnerHTML={{ __html: project.desc }} />\r\n        </Description>\r\n      </PBox>\r\n      <Content bg={project.color} py={10}>\r\n        <PBox style={imagesAnimation} px={[6, 6, 8, 10]}>\r\n          {images.nodes.map(image => (\r\n            <Img alt={image.name} key={image.childImageSharp.fluid.src} fluid={image.childImageSharp.fluid} />\r\n          ))}\r\n          {project.youtube.map(videoId => (\r\n            <YouTubeContainer className=\"youtube-video\">\r\n              <iframe\r\n                style={YoutubeStyle}\r\n                src={`https://www.youtube.com/embed/${videoId}`}\r\n                frameBorder=\"0\"\r\n                allowFullScreen=\"allowfullscreen\"\r\n              />\r\n            </YouTubeContainer>\r\n          ))}\r\n        </PBox>\r\n      </Content>\r\n      {/* <PBox style={{ textAlign: 'center' }} py={10} px={[6, 6, 8, 10]}>\r\n        <h2>Want to start your own project?</h2>\r\n        <PButton color={project.color} py={4} px={8}>\r\n          Contact me\r\n        </PButton>\r\n      </PBox> */}\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default Project\r\n\r\nexport const query = graphql`\r\n  query ProjectTemplate($slug: String!, $images: String!) {\r\n    project: projectsYaml(slug: { eq: $slug }) {\r\n      title_detail\r\n      color\r\n      category\r\n      desc\r\n      slug\r\n      youtube\r\n      parent {\r\n        ... on File {\r\n          modifiedTime\r\n          birthTime\r\n        }\r\n      }\r\n      cover {\r\n        childImageSharp {\r\n          resize(width: 1200, height: 675, quality: 80) {\r\n            src\r\n          }\r\n        }\r\n      }\r\n    }\r\n    images: allFile(filter: { relativePath: { regex: $images } }, sort: { fields: name, order: ASC }) {\r\n      nodes {\r\n        name\r\n        childImageSharp {\r\n          fluid(quality: 95, maxWidth: 1200) {\r\n            ...GatsbyImageSharpFluid_withWebp\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}